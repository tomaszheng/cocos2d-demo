---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by tomas.
--- DateTime: 2021/12/15 15:40
--- 拖拽组件
---
local Touchable = require("src.components.touch.Touchable")
local Draggable = class("Draggable", BaseComponent)

function Draggable:ctor(node, data)
    cc.load("event").new():bind(self)
    Draggable.super.ctor(self, node, data)
    self:initData(data)
    self:initListener()
end

function Draggable:initData(data)
    data = data or {}
    -- 响应限制方法
    self.onLimitFunc = data.onLimit
    -- touch的各个阶段
    self.onBeganFunc, self.onMovedFunc = data.onBegan, data.onMoved
    self.onEndedFunc, self.onCanceledFunc = data.onEnded, data.onCanceled
    self.onClickFunc, self.onLongTouchFunc = data.onClick, data.onLongTouch
    -- 自定义交互方法(在按下/抬起手指时触发)
    self.interactionFunc = data.interaction

    self.touchable = self.node:getLuaComponent(Touchable)
    if not self.touchable then
        self.touchable = self.node:addLuaComponent(Touchable, {
            shape = data.shape,
            isLongTouchEnabled = self.type == Clickable.TYPES.LONG_TOUCH,
            longTouchThreshold = data.longTouchThreshold,
        })
    end

    -- 当前此touch是否是有效点击
    self.isCurrTouchValid = false
    self.prevTriggerTime = 0
    self.touchBeganPosition = cc.p(0, 0)
    self.touchCurrPosition = cc.p(0, 0)
    self.defaultScale = self.node:getScale()
    self.defaultColor = self.node:getColor()
    self.action = nil
end

function Draggable:initListener()
    self.touchable:addEventListener(Touchable.ON_BEGAN, handler(self, self.onTouchBegan))
    self.touchable:addEventListener(Touchable.ON_MOVED, handler(self, self.onTouchMoved))
    self.touchable:addEventListener(Touchable.ON_ENDED, handler(self, self.onTouchEnded))
    self.touchable:addEventListener(Touchable.ON_CANCELED, handler(self, self.onTouchCanceled))
    self.touchable:addEventListener(Touchable.ON_LONG_TOUCH, handler(self, self.onLongTouch))
    self.touchable:addEventListener(Touchable.ON_DESTROY, handler(self, self.onTouchDestroy))
end


return Draggable
