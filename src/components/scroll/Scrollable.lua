---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by tomas.
--- DateTime: 2022/1/6 15:07
--- Content: 滑动组件
---
local Touchable = require("src.components.touch.Touchable")
local Scrolling = require("src.components.scroll.Scrolling")
local Scrollable = class("Scrollable", Touchable)

Scrollable.MOVE_DIRECTION = {
    NONE = 0,
    TOP = 1,
    BOTTOM = 2,
    LEFT = 3,
    RIGHT = 4
}

local SCROLLING_ID = "Scrollable"

function Scrollable:ctor(node, data)
    Scrollable.super.ctor(self, node, data)
end

function Scrollable:initData(data)
    Scrollable.super.initData(self, data)
    data = data or {}
    -- 滚动时的响应限制函数
    self._onScrollLimitFunc = data.onScrollLimit
    -- 拖拽是否有位移限制
    self._isMoveLimitEnabled = data.moveLimitEnabled or false
    self._moveThreshold = data.moveThreshold or 5
    -- 最大回弹距离
    self._maxReboundDistance = data.maxReboundDistance

    self._scrolling = self.node:addLuaComponent(Scrolling, data)
    self._scrolling:setId(SCROLLING_ID)

    self._isScrollEnabled = true
    self._isCurrMoveTooShort = true
    self._moveDirection = Scrollable.MOVE_DIRECTION.NONE
end

function Scrollable:onTouchBegan(touch)
    if not self._isScrollEnabled then
        return false
    end

    if not Scrollable.super.onTouchBegan(self, touch) then return false end

    self._isCurrMoveTooShort = true
    self._scrolling:begin(self._touchCurrPosition)

    return true
end

function Scrollable:onTouchMoved(touch)
    if not Scrollable.super.onTouchMoved(self, touch) then return false end

    if self:isScrollLimiting() then return false end

    self._scrolling:drag(self._touchCurrPosition)

    return true
end

function Scrollable:onTouchEnded(touch)
    if not Scrollable.super.onTouchEnded(self, touch) then return false end
    self._scrolling:ended()
    return true
end

function Scrollable:onTouchCanceled()
    if not Scrollable.super.onTouchCanceled(self) then return false end
    self._scrolling:ended()
    return true
end

function Scrollable:isScrollLimiting()
    if self._isMoveLimitEnabled then
        if not self._isCurrMoveTooShort then
            return false
        else
            local distance = cc.pGetDistance(self._touchBeganPosition, self._touchCurrPosition)
            if distance > self._moveThreshold then
                self._isCurrMoveTooShort = false
                return false
            end
        end
    end
    if self._onScrollLimitFunc then
        return doCallback(self._onScrollLimitFunc, self._touchCurrPosition)
    end
    return false
end

function Scrollable:setScrollEnabled(enabled)
    self._isScrollEnabled = enabled
end

function Scrollable:setRebounding(rebounding)
    self._scrolling:setRebounding(rebounding)
end

function Scrollable:isScrollCompleted()
    return self._scrolling:isDragCompleted()
end

function Scrollable:onDestroy()
    Scrollable.super.onDestroy(self)
    self.node:removeLuaComponentById(SCROLLING_ID)
end

return Scrollable