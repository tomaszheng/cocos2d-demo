---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by tomas.
--- DateTime: 2021/12/24 15:25
---
local BaseShader = require("src.components.shaders.BaseShader")
local Ripple = class("Ripple", BaseShader)

Ripple.VERT = "res/shaders/mvp.vsh"
Ripple.FRAG = "res/shaders/ripple.fsh"

local DEFAULT_RADIUS = 40
local DEFAULT_WIDTH = 10
local DEFAULT_BORDER = 20

local RADIUS_NAME = "u_radius"
local CENTER_NAME = "u_center"
local WIDTH_NAME = "u_width"
local BORDER_NAME = "u_border"
local TIME_NAME = "u_time"

function Ripple:ctor(node, data)
    Ripple.super.ctor(self, node, data)
end

function Ripple:initData(data)
    data = data or {}
    Ripple.super.initData(self, data)

    -- 模糊半径
    self.radius = data.radius or DEFAULT_RADIUS
    -- 圆的线宽
    self.width = data.width or DEFAULT_WIDTH
    -- 圆边缘过渡区宽度
    self.border = data.border or DEFAULT_BORDER
    -- 时间
    self.time = 0
    -- 径向模糊的中心
    self.center = data.center or cc.p(0.5, 0.5)

    self.isRunning = false
    self.caller = -1
end

function Ripple:initDefaultUniform()
    Ripple.super.initDefaultUniform(self)

    self:setRadius(self.radius)
    self:setWidth(self.width)
    self:setBorder(self.border)
    self:setCenter(self.center)
    self:setTime(0)
end

function Ripple:start(position)
    logi("Ripple:start")
    self.time = 0
    self:setCenter(position)
    if not self.isRunning then
        self.caller = repeatCall(handler(self, self.update), 0, 0, 1 / 60)
        self.isRunning = true
    end
end

function Ripple:update(dt)
    self.time = self.time + dt
    self:setTime(self.time)
end

function Ripple:setRadius(radius)
    self.radius = radius
    self:setFloat(RADIUS_NAME, radius)
end

function Ripple:setWidth(width)
    self.width = width
    self:setFloat(WIDTH_NAME, width)
end

function Ripple:setBorder(border)
    self.border = border
    self:setFloat(BORDER_NAME, border)
end

function Ripple:setTime(time)
    self.time = time
    self:setFloat(TIME_NAME, time)
end

function Ripple:setCenter(center)
    self.center = cc.pNormalize(self.center)
    self:setVec2(CENTER_NAME, center)
end

function Ripple:onDestroy()
    Ripple.super.onDestroy(self)
    if self.caller ~= -1 then
        stopCall(self.caller)
    end
end

return Ripple