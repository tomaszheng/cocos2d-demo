---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by tomas.
--- DateTime: 2021/11/25 16:10
--- Content: 模糊Shader
---

-- 示例用法如下
--[[
node:addLuaComponent(Blur,
{
    radius = 3,         -- 模糊半径
    brightness = 1,     -- 亮度
    center = cc.p(0,0), -- 径向模糊中心
    defines = {         -- 宏定义
        sampleNum = 5,  -- 采样次数
        blurType = Blur.BLUR_TYPE.FROSTED   -- 模糊类型
    }
})
--]]

local BaseShader = require("src.components.shaders.BaseShader")
local Blur = class("Blur", BaseShader)

Blur.VERT = "res/shaders/mvp.vsh"
Blur.FRAG = "res/shaders/blur.fsh"

Blur.BLUR_TYPE = {
    NORMAL = 1,
    FROSTED = 2,    -- 磨砂效果
    RADIAL = 3,     -- 径向模糊
    GAUSSIAN = 4,   -- 高斯模糊
}

local DEFAULT_BLUR_TYPE = Blur.BLUR_TYPE.NORMAL
local DEFAULT_SAMPLE_NUM = 5
local DEFAULT_RADIUS = 7
local DEFAULT_BRIGHTNESS = 1

local BLUR_TYPE_NAME = "u_blurType"
local SAMPLE_NUM_NAME = "u_sampleNum"
local RADIUS_NAME = "u_radius"
local BRIGHTNESS_NAME = "u_brightness"
local CENTER_NAME = "u_center"

function Blur:ctor(node, data)
    Blur.super.ctor(self, node, data)
end

function Blur:initData(data)
    data = data or {}
    Blur.super.initData(self, data)

    -- 模糊类型
    self.blurType = data.blurType or DEFAULT_BLUR_TYPE
    -- 采样次数，当blurType等于FUZZY/RADIAL有效
    self.sampleNum = data.sampleNum or DEFAULT_SAMPLE_NUM
    -- 模糊半径
    self.radius = data.radius or DEFAULT_RADIUS
    -- 亮度
    self.brightness = data.brightness or DEFAULT_BRIGHTNESS
    -- 径向模糊的中心
    self.center = data.center or cc.p(0.5, 0.5)
end

function Blur:initDefaultUniform()
    Blur.super.initDefaultUniform(self)

    self:setBlurType(self.blurType)
    self:setSampleNum(self.sampleNum)
    self:setRadius(self.radius)
    self:setBrightness(self.brightness)
    self:setCenter(self.center)
end

function Blur:setBlurType(blurType)
    self.blurType = blurType
    if not table.keyOf(Blur.BLUR_TYPE, blurType) then
        self.blurType = DEFAULT_BLUR_TYPE
    end
    self:setInt(BLUR_TYPE_NAME, self.blurType)
end

function Blur:setSampleNum(sampleNum)
    self.sampleNum = checkint(sampleNum)
    if self.sampleNum < 1 then
        self.sampleNum = DEFAULT_SAMPLE_NUM
    end
    self:setInt(SAMPLE_NUM_NAME, self.sampleNum)
end

function Blur:setRadius(radius)
    self.radius = radius
    self:setFloat(RADIUS_NAME, radius)
end

function Blur:setBrightness(brightness)
    self.brightness = brightness
    self:setFloat(BRIGHTNESS_NAME, brightness)
end

function Blur:setCenter(center)
    if self.defines.blurType ~= Blur.BLUR_TYPE.RADIAL then return end

    self.center = cc.pNormalize(self.center)
    self:setVec2(CENTER_NAME, center)
end

return Blur