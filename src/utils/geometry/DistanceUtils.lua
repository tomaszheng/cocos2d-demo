---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by tomas.
--- DateTime: 2021/12/13 15:08
---
local DistanceUtils = {}

local INF = 1e19

--- 计算点到直线的距离。如果这是一条线段并且垂足不在线段内，则会计算点到线段端点的距离。
---@param point point       The point
---@param startP point      The start point of line
---@param endP point        The end point of line
---@param isSegment boolean whether this line is a segment
---@return number
function DistanceUtils.pToLine(point, startP, endP, isSegment)
    local dx, dy = endP.x - startP.x, endP.y - startP.y
    local d = dx * dx + dy * dy
    local p

    if d == 0 then
        p = startP
    else
        local t = ((point.x - startP.x) * dx + (point.y - startP.y) * dy) / d
        if not isSegment then
            p = cc.p(startP.x + t * dx, startP.y + t * dy)
        else
            if (t < 0) then
                p = startP
            elseif (t > 1) then
                p = endP
            else
                p = cc.p(startP.x + t * dx, startP.y + t * dy)
            end
        end
    end
    return cc.pGetDistance(point, p)
end

function DistanceUtils.pToRect(p, rect)
    local x, y, rx, ty = rect.x, rect.y, rect.x + rect.width, rect.y + rect.height
    if p.x >= x and p.x <= rx and p.y >= y and p.y <= ty then
        return 0
    elseif p.x <= x or p.x >= rx then
        local tx = p.x <= x and x or rx
        if p.y <= y then
            return cc.pGetDistance(cc.p(tx, y), p)
        elseif p.y >= ty then
            return cc.pGetDistance(cc.p(tx, ty), p)
        else
            return math.abs(tx - p.x)
        end
    else
        local y2 = p.y <= y and y or ty
        return math.abs(y2 - p.y)
    end
end

function DistanceUtils.pToPolygon(p, polygon)

end

return DistanceUtils