---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by tomas.
--- DateTime: 2021/12/8 9:55
--- Content: 截图
---

local ShotUtils = {}

local function recordNodesVisible(nodes)
    local records = {}
    local hideNodes = function()
        table.walk(nodes, function(node)
            records[node] = node:isVisible()
            node:setVisible(false)
        end)
    end
    local recoverNodes = function()
        table.walk(nodes, function(node)
            node:setVisible(records[node])
        end)
    end
    return hideNodes, recoverNodes
end

---
--- 截图
--- @param options table 可选参数
--- @param options.target cc.Node 截图的目标对象
--- @param options.rect cc.Rect 截图区域，世界坐标
--- @param options.filename string 保存图片的文件名，可选
--- @param options.fileFormat number 保存图片的格式，可选
--- @param options.excluded table 需要过滤掉的节点列表，可选
--- @param options.onComplete function 保存图片完成的回调，可选
--- @return cc.RenderTexture
function ShotUtils.shot(options)
    options = options or {}
    local target = options.target or display.getRunningScene()
    local rect = options.rect or cc.rect(0, 0, display.width, display.height)
    local savedFilename = options.filename
    local savedFileFormat = options.fileFormat or cc.IMAGE_FORMAT_PNG
    local onComplete = options.onComplete
    local excluded = options.excluded or {}

    local pixelSize = cc.Director:getInstance():getWinSizeInPixels()
    local origin = cc.p(rect.x, rect.y)
    local width, height = rect.width, rect.height
    local fullRect = cc.rect(0, 0, display.width, display.height)
    local fullViewport = cc.rect(0, 0, pixelSize.width, pixelSize.height)

    local hideNodes, recoverNodes = recordNodesVisible(excluded)
    hideNodes()

    local rt = cc.RenderTexture:create(width, height, cc.TEXTURE2_D_PIXEL_FORMAT_RGB_A8888, gl.DEPTH24_STENCIL8_OES)
    rt:setKeepMatrix(true)
    rt:setVirtualViewport(origin, fullRect, fullViewport)
    rt:beginWithClear(1, 1, 1, 0)
    target:visit()
    rt:endToLua()
    if savedFilename then
        rt:saveToFile(savedFilename, savedFileFormat)
    end
    if onComplete and savedFilename then
        delayCall(function()
            doCallback(onComplete, cc.FileUtils:getInstance():getWritablePath() .. savedFilename)
        end, 0)
    end
    recoverNodes()
    return rt
end

---
--- 对指定目标进行截图
--- @param options target 截图目标
--- @param options table 可选参数
--- @param options.rect cc.Rect 截图区域，默认target节点本地坐标系
--- @param options.isWorld boolean 坐标系是否是世界坐标系
--- @param options.filename string 保存图片的文件名，可选
--- @param options.fileFormat number 保存图片的格式，可选
--- @param options.excluded table 需要过滤掉的节点列表，可选
--- @param options.onComplete function 保存图片完成的回调，可选
--- @return cc.RenderTexture
function ShotUtils.shotNode(target, options)
    target = target or display.getRunningScene()
    options = options or {}
    options.target = target
    if options.rect then
        if not options.isWorld then
            local rect = options.rect
            local p = target:convertToWorldSpace(cc.p(rect.x, rect.y))
            local wh = target:convertToWorldSpace(cc.p(rect.width, rect.height))
            options.rect = cc.rect(p.x, p.y, wh.x, wh.y)
        end
    else
        options.rect = target:getBoundingBoxToWorld()
    end
    return ShotUtils.shot(options)
end

return ShotUtils